/*
 * This file is generated by jOOQ.
 */
package org.example.soa_lab3_LabService.service.lab.generated.jooq.public_.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.soa_lab3_LabService.service.lab.generated.jooq.public_.Keys;
import org.example.soa_lab3_LabService.service.lab.generated.jooq.public_.Public;
import org.example.soa_lab3_LabService.service.lab.generated.jooq.public_.tables.records.LabRefRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabRef extends TableImpl<LabRefRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_ref</code>
     */
    public static final LabRef LAB_REF = new LabRef();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabRefRecord> getRecordType() {
        return LabRefRecord.class;
    }

    /**
     * The column <code>public.lab_ref.coordinates_y</code>.
     */
    public final TableField<LabRefRecord, Double> COORDINATES_Y = createField(DSL.name("coordinates_y"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.lab_ref.minimal_point</code>.
     */
    public final TableField<LabRefRecord, Integer> MINIMAL_POINT = createField(DSL.name("minimal_point"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_ref.person_location_x</code>.
     */
    public final TableField<LabRefRecord, Float> PERSON_LOCATION_X = createField(DSL.name("person_location_x"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.lab_ref.person_location_y</code>.
     */
    public final TableField<LabRefRecord, Double> PERSON_LOCATION_Y = createField(DSL.name("person_location_y"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.lab_ref.coordinates_x</code>.
     */
    public final TableField<LabRefRecord, Long> COORDINATES_X = createField(DSL.name("coordinates_x"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lab_ref.creation_date</code>.
     */
    public final TableField<LabRefRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.lab_ref.id</code>.
     */
    public final TableField<LabRefRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lab_ref.person_birthday</code>.
     */
    public final TableField<LabRefRecord, LocalDateTime> PERSON_BIRTHDAY = createField(DSL.name("person_birthday"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.lab_ref.difficulty</code>.
     */
    public final TableField<LabRefRecord, String> DIFFICULTY = createField(DSL.name("difficulty"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lab_ref.name</code>.
     */
    public final TableField<LabRefRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lab_ref.person_eye_color</code>.
     */
    public final TableField<LabRefRecord, String> PERSON_EYE_COLOR = createField(DSL.name("person_eye_color"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lab_ref.person_hair_color</code>.
     */
    public final TableField<LabRefRecord, String> PERSON_HAIR_COLOR = createField(DSL.name("person_hair_color"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lab_ref.person_location_name</code>.
     */
    public final TableField<LabRefRecord, String> PERSON_LOCATION_NAME = createField(DSL.name("person_location_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lab_ref.person_name</code>.
     */
    public final TableField<LabRefRecord, String> PERSON_NAME = createField(DSL.name("person_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lab_ref.person_nationality</code>.
     */
    public final TableField<LabRefRecord, String> PERSON_NATIONALITY = createField(DSL.name("person_nationality"), SQLDataType.VARCHAR(255), this, "");

    private LabRef(Name alias, Table<LabRefRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabRef(Name alias, Table<LabRefRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_ref</code> table reference
     */
    public LabRef(String alias) {
        this(DSL.name(alias), LAB_REF);
    }

    /**
     * Create an aliased <code>public.lab_ref</code> table reference
     */
    public LabRef(Name alias) {
        this(alias, LAB_REF);
    }

    /**
     * Create a <code>public.lab_ref</code> table reference
     */
    public LabRef() {
        this(DSL.name("lab_ref"), null);
    }

    public <O extends Record> LabRef(Table<O> child, ForeignKey<O, LabRefRecord> key) {
        super(child, key, LAB_REF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LabRefRecord> getPrimaryKey() {
        return Keys.LAB_REF_PKEY;
    }

    @Override
    public List<Check<LabRefRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("lab_ref_difficulty_check"), "(((difficulty)::text = ANY ((ARRAY['NORMAL'::character varying, 'INSANE'::character varying, 'TERRIBLE'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("lab_ref_person_eye_color_check"), "(((person_eye_color)::text = ANY ((ARRAY['GREEN'::character varying, 'BLACK'::character varying, 'YELLOW'::character varying, 'ORANGE'::character varying, 'WHITE'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("lab_ref_person_hair_color_check"), "(((person_hair_color)::text = ANY ((ARRAY['GREEN'::character varying, 'BLACK'::character varying, 'YELLOW'::character varying, 'ORANGE'::character varying, 'WHITE'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("lab_ref_person_nationality_check"), "(((person_nationality)::text = ANY ((ARRAY['GERMANY'::character varying, 'INDIA'::character varying, 'ITALY'::character varying, 'THAILAND'::character varying])::text[])))", true)
        );
    }

    @Override
    public LabRef as(String alias) {
        return new LabRef(DSL.name(alias), this);
    }

    @Override
    public LabRef as(Name alias) {
        return new LabRef(alias, this);
    }

    @Override
    public LabRef as(Table<?> alias) {
        return new LabRef(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabRef rename(String name) {
        return new LabRef(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabRef rename(Name name) {
        return new LabRef(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabRef rename(Table<?> name) {
        return new LabRef(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Double, Integer, Float, Double, Long, LocalDateTime, Long, LocalDateTime, String, String, String, String, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Double, ? super Integer, ? super Float, ? super Double, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Double, ? super Integer, ? super Float, ? super Double, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
